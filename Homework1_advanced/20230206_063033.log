2023/02/06 06:30:33 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]
    CUDA available: True
    numpy_random_seed: 1937086770
    GPU 0: NVIDIA GeForce RTX 3090
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.1, V11.1.105
    GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
    PyTorch: 1.8.2+cu111
    PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

    TorchVision: 0.9.2+cu111
    OpenCV: 4.5.3
    MMEngine: 0.5.0

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: None
    deterministic: False
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/02/06 06:30:33 - mmengine - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        frozen_stages=2,
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=10,
        in_channels=2048,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, 5)))
train_pipeline = [
    dict(type='RandomCrop', crop_size=32, padding=4),
    dict(type='RandomFlip', prob=0.5, direction='horizontal'),
    dict(type='Resize', scale=224),
    dict(type='PackClsInputs')
]
test_pipeline = [dict(type='Resize', scale=224), dict(type='PackClsInputs')]
train_dataloader = dict(
    pin_memory=True,
    persistent_workers=True,
    collate_fn=dict(type='default_collate'),
    batch_size=32,
    num_workers=5,
    dataset=dict(
        type='CIFAR10',
        data_root='data/cifar10',
        test_mode=False,
        data_prefix='train',
        pipeline=[
            dict(type='RandomCrop', crop_size=32, padding=4),
            dict(type='RandomFlip', prob=0.5, direction='horizontal'),
            dict(type='Resize', scale=224),
            dict(type='PackClsInputs')
        ]),
    sampler=dict(type='DefaultSampler', shuffle=True))
val_dataloader = dict(
    pin_memory=True,
    persistent_workers=True,
    collate_fn=dict(type='default_collate'),
    batch_size=32,
    num_workers=5,
    dataset=dict(
        type='CIFAR10',
        data_root='data/cifar10',
        test_mode=True,
        data_prefix='val',
        pipeline=[dict(type='Resize', scale=224),
                  dict(type='PackClsInputs')]),
    sampler=dict(type='DefaultSampler', shuffle=False))
val_evaluator = dict(type='Accuracy', topk=(1, 5))
test_dataloader = dict(
    pin_memory=True,
    persistent_workers=True,
    collate_fn=dict(type='default_collate'),
    batch_size=32,
    num_workers=5,
    dataset=dict(
        type='CIFAR10',
        data_root='data/cifar10',
        test_mode=True,
        data_prefix='val',
        pipeline=[dict(type='Resize', scale=224),
                  dict(type='PackClsInputs')]),
    sampler=dict(type='DefaultSampler', shuffle=False))
test_evaluator = dict(type='Accuracy', topk=(1, 5))
optim_wrapper = dict(
    optimizer=dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001))
param_scheduler = dict(
    type='MultiStepLR', by_epoch=True, milestones=[30, 60, 90], gamma=0.1)
train_cfg = dict(by_epoch=True, max_epochs=10, val_interval=1)
val_cfg = dict()
test_cfg = dict()
auto_scale_lr = dict(base_batch_size=256)
default_scope = 'mmcls'
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=100),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', interval=1),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='VisualizationHook', enable=False))
env_cfg = dict(
    cudnn_benchmark=False,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='ClsVisualizer', vis_backends=[dict(type='LocalVisBackend')])
log_level = 'INFO'
load_from = 'resnet50_8xb32_in1k_20210831-ea4938fc.pth'
resume = False
randomness = dict(seed=None, deterministic=False)
launcher = 'none'
work_dir = './work_dirs/resnet50_8xb32_in1k'

2023/02/06 06:30:33 - mmengine - WARNING - The "visualizer" registry in mmcls did not set import location. Fallback to call `mmcls.utils.register_all_modules` instead.
2023/02/06 06:30:33 - mmengine - WARNING - The "vis_backend" registry in mmcls did not set import location. Fallback to call `mmcls.utils.register_all_modules` instead.
2023/02/06 06:30:33 - mmengine - WARNING - The "model" registry in mmcls did not set import location. Fallback to call `mmcls.utils.register_all_modules` instead.
2023/02/06 06:30:36 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/02/06 06:30:36 - mmengine - WARNING - The "hook" registry in mmcls did not set import location. Fallback to call `mmcls.utils.register_all_modules` instead.
2023/02/06 06:30:36 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/02/06 06:30:36 - mmengine - WARNING - The "dataset" registry in mmcls did not set import location. Fallback to call `mmcls.utils.register_all_modules` instead.
2023/02/06 06:30:36 - mmengine - WARNING - The "transform" registry in mmcls did not set import location. Fallback to call `mmcls.utils.register_all_modules` instead.
2023/02/06 06:30:38 - mmengine - WARNING - The "data sampler" registry in mmcls did not set import location. Fallback to call `mmcls.utils.register_all_modules` instead.
2023/02/06 06:30:38 - mmengine - WARNING - The "optimizer wrapper constructor" registry in mmcls did not set import location. Fallback to call `mmcls.utils.register_all_modules` instead.
2023/02/06 06:30:38 - mmengine - WARNING - The "optimizer" registry in mmcls did not set import location. Fallback to call `mmcls.utils.register_all_modules` instead.
2023/02/06 06:30:38 - mmengine - WARNING - The "optimizer_wrapper" registry in mmcls did not set import location. Fallback to call `mmcls.utils.register_all_modules` instead.
2023/02/06 06:30:38 - mmengine - WARNING - The "parameter scheduler" registry in mmcls did not set import location. Fallback to call `mmcls.utils.register_all_modules` instead.
2023/02/06 06:30:39 - mmengine - WARNING - The "metric" registry in mmcls did not set import location. Fallback to call `mmcls.utils.register_all_modules` instead.
2023/02/06 06:30:39 - mmengine - WARNING - The "weight initializer" registry in mmcls did not set import location. Fallback to call `mmcls.utils.register_all_modules` instead.
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([10, 2048]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([10]): 
NormalInit: mean=0, std=0.01, bias=0 
2023/02/06 06:30:39 - mmengine - INFO - Load checkpoint from resnet50_8xb32_in1k_20210831-ea4938fc.pth
2023/02/06 06:30:39 - mmengine - INFO - Checkpoints will be saved to /output/mmclassification/work_dirs/resnet50_8xb32_in1k.
2023/02/06 06:30:45 - mmengine - INFO - Epoch(train)  [1][ 100/1563]  lr: 1.0000e-03  eta: 0:16:00  time: 0.0499  data_time: 0.0003  memory: 1025  loss: 1.7856
2023/02/06 06:30:50 - mmengine - INFO - Epoch(train)  [1][ 200/1563]  lr: 1.0000e-03  eta: 0:14:22  time: 0.0498  data_time: 0.0003  memory: 1025  loss: 1.4102
2023/02/06 06:30:55 - mmengine - INFO - Epoch(train)  [1][ 300/1563]  lr: 1.0000e-03  eta: 0:13:47  time: 0.0502  data_time: 0.0003  memory: 1025  loss: 1.2994
2023/02/06 06:31:00 - mmengine - INFO - Epoch(train)  [1][ 400/1563]  lr: 1.0000e-03  eta: 0:13:26  time: 0.0501  data_time: 0.0003  memory: 1025  loss: 1.1262
2023/02/06 06:31:05 - mmengine - INFO - Epoch(train)  [1][ 500/1563]  lr: 1.0000e-03  eta: 0:13:12  time: 0.0502  data_time: 0.0003  memory: 1025  loss: 1.0846
2023/02/06 06:31:10 - mmengine - INFO - Epoch(train)  [1][ 600/1563]  lr: 1.0000e-03  eta: 0:13:01  time: 0.0498  data_time: 0.0003  memory: 1025  loss: 0.9764
2023/02/06 06:31:15 - mmengine - INFO - Epoch(train)  [1][ 700/1563]  lr: 1.0000e-03  eta: 0:12:51  time: 0.0498  data_time: 0.0003  memory: 1025  loss: 0.8983
2023/02/06 06:31:20 - mmengine - INFO - Epoch(train)  [1][ 800/1563]  lr: 1.0000e-03  eta: 0:12:43  time: 0.0494  data_time: 0.0003  memory: 1025  loss: 0.7806
2023/02/06 06:31:25 - mmengine - INFO - Epoch(train)  [1][ 900/1563]  lr: 1.0000e-03  eta: 0:12:35  time: 0.0500  data_time: 0.0003  memory: 1025  loss: 0.7840
2023/02/06 06:31:30 - mmengine - INFO - Exp name: resnet50_8xb32_in1k_20230206_063033
2023/02/06 06:31:30 - mmengine - INFO - Epoch(train)  [1][1000/1563]  lr: 1.0000e-03  eta: 0:12:29  time: 0.0500  data_time: 0.0003  memory: 1025  loss: 0.8189
2023/02/06 06:31:35 - mmengine - INFO - Epoch(train)  [1][1100/1563]  lr: 1.0000e-03  eta: 0:12:22  time: 0.0505  data_time: 0.0003  memory: 1025  loss: 0.7852
2023/02/06 06:31:40 - mmengine - INFO - Epoch(train)  [1][1200/1563]  lr: 1.0000e-03  eta: 0:12:16  time: 0.0494  data_time: 0.0003  memory: 1025  loss: 0.6493
2023/02/06 06:31:45 - mmengine - INFO - Epoch(train)  [1][1300/1563]  lr: 1.0000e-03  eta: 0:12:10  time: 0.0498  data_time: 0.0003  memory: 1025  loss: 0.5790
2023/02/06 06:31:50 - mmengine - INFO - Epoch(train)  [1][1400/1563]  lr: 1.0000e-03  eta: 0:12:04  time: 0.0499  data_time: 0.0003  memory: 1025  loss: 0.7930
2023/02/06 06:31:55 - mmengine - INFO - Epoch(train)  [1][1500/1563]  lr: 1.0000e-03  eta: 0:11:58  time: 0.0509  data_time: 0.0003  memory: 1025  loss: 0.5817
2023/02/06 06:31:58 - mmengine - INFO - Exp name: resnet50_8xb32_in1k_20230206_063033
2023/02/06 06:31:58 - mmengine - INFO - Saving checkpoint at 1 epochs
2023/02/06 06:32:02 - mmengine - INFO - Epoch(val)  [1][100/313]    eta: 0:00:06  time: 0.0276  data_time: 0.0001  memory: 1025  
2023/02/06 06:32:05 - mmengine - INFO - Epoch(val)  [1][200/313]    eta: 0:00:03  time: 0.0282  data_time: 0.0001  memory: 600  
2023/02/06 06:32:08 - mmengine - INFO - Epoch(val)  [1][300/313]    eta: 0:00:00  time: 0.0282  data_time: 0.0001  memory: 600  
2023/02/06 06:32:08 - mmengine - INFO - Epoch(val) [1][313/313]  accuracy/top1: 47.2600  accuracy/top5: 88.0100
2023/02/06 06:32:13 - mmengine - INFO - Epoch(train)  [2][ 100/1563]  lr: 1.0000e-03  eta: 0:11:49  time: 0.0503  data_time: 0.0003  memory: 1025  loss: 0.5620
2023/02/06 06:32:18 - mmengine - INFO - Epoch(train)  [2][ 200/1563]  lr: 1.0000e-03  eta: 0:11:44  time: 0.0500  data_time: 0.0003  memory: 1025  loss: 0.5813
2023/02/06 06:32:23 - mmengine - INFO - Epoch(train)  [2][ 300/1563]  lr: 1.0000e-03  eta: 0:11:38  time: 0.0503  data_time: 0.0003  memory: 1025  loss: 0.5819
2023/02/06 06:32:28 - mmengine - INFO - Epoch(train)  [2][ 400/1563]  lr: 1.0000e-03  eta: 0:11:33  time: 0.0504  data_time: 0.0003  memory: 1025  loss: 0.5850
2023/02/06 06:32:30 - mmengine - INFO - Exp name: resnet50_8xb32_in1k_20230206_063033
2023/02/06 06:32:33 - mmengine - INFO - Epoch(train)  [2][ 500/1563]  lr: 1.0000e-03  eta: 0:11:27  time: 0.0501  data_time: 0.0003  memory: 1025  loss: 0.5177
2023/02/06 06:32:38 - mmengine - INFO - Epoch(train)  [2][ 600/1563]  lr: 1.0000e-03  eta: 0:11:22  time: 0.0501  data_time: 0.0003  memory: 1025  loss: 0.4709
2023/02/06 06:32:43 - mmengine - INFO - Epoch(train)  [2][ 700/1563]  lr: 1.0000e-03  eta: 0:11:17  time: 0.0503  data_time: 0.0003  memory: 1025  loss: 0.4919
2023/02/06 06:32:49 - mmengine - INFO - Epoch(train)  [2][ 800/1563]  lr: 1.0000e-03  eta: 0:11:11  time: 0.0501  data_time: 0.0003  memory: 1025  loss: 0.5543
2023/02/06 06:32:54 - mmengine - INFO - Epoch(train)  [2][ 900/1563]  lr: 1.0000e-03  eta: 0:11:06  time: 0.0508  data_time: 0.0003  memory: 1025  loss: 0.4810
2023/02/06 06:32:59 - mmengine - INFO - Epoch(train)  [2][1000/1563]  lr: 1.0000e-03  eta: 0:11:01  time: 0.0502  data_time: 0.0003  memory: 1025  loss: 0.5107
2023/02/06 06:33:04 - mmengine - INFO - Epoch(train)  [2][1100/1563]  lr: 1.0000e-03  eta: 0:10:56  time: 0.0501  data_time: 0.0003  memory: 1025  loss: 0.4648
2023/02/06 06:33:09 - mmengine - INFO - Epoch(train)  [2][1200/1563]  lr: 1.0000e-03  eta: 0:10:50  time: 0.0501  data_time: 0.0003  memory: 1025  loss: 0.5037
2023/02/06 06:33:14 - mmengine - INFO - Epoch(train)  [2][1300/1563]  lr: 1.0000e-03  eta: 0:10:45  time: 0.0507  data_time: 0.0003  memory: 1025  loss: 0.4364
2023/02/06 06:33:19 - mmengine - INFO - Epoch(train)  [2][1400/1563]  lr: 1.0000e-03  eta: 0:10:40  time: 0.0502  data_time: 0.0003  memory: 1025  loss: 0.4727
2023/02/06 06:33:21 - mmengine - INFO - Exp name: resnet50_8xb32_in1k_20230206_063033
2023/02/06 06:33:24 - mmengine - INFO - Epoch(train)  [2][1500/1563]  lr: 1.0000e-03  eta: 0:10:35  time: 0.0506  data_time: 0.0003  memory: 1025  loss: 0.4328
2023/02/06 06:33:27 - mmengine - INFO - Exp name: resnet50_8xb32_in1k_20230206_063033
2023/02/06 06:33:27 - mmengine - INFO - Saving checkpoint at 2 epochs
2023/02/06 06:33:30 - mmengine - INFO - Epoch(val)  [2][100/313]    eta: 0:00:06  time: 0.0282  data_time: 0.0002  memory: 1025  
2023/02/06 06:33:33 - mmengine - INFO - Epoch(val)  [2][200/313]    eta: 0:00:03  time: 0.0283  data_time: 0.0002  memory: 600  
2023/02/06 06:33:36 - mmengine - INFO - Epoch(val)  [2][300/313]    eta: 0:00:00  time: 0.0283  data_time: 0.0002  memory: 600  
2023/02/06 06:33:36 - mmengine - INFO - Epoch(val) [2][313/313]  accuracy/top1: 80.6200  accuracy/top5: 98.8800
2023/02/06 06:33:42 - mmengine - INFO - Epoch(train)  [3][ 100/1563]  lr: 1.0000e-03  eta: 0:10:26  time: 0.0500  data_time: 0.0003  memory: 1025  loss: 0.4667
2023/02/06 06:33:47 - mmengine - INFO - Epoch(train)  [3][ 200/1563]  lr: 1.0000e-03  eta: 0:10:21  time: 0.0496  data_time: 0.0003  memory: 1025  loss: 0.2999
2023/02/06 06:33:52 - mmengine - INFO - Epoch(train)  [3][ 300/1563]  lr: 1.0000e-03  eta: 0:10:16  time: 0.0504  data_time: 0.0003  memory: 1025  loss: 0.3922
2023/02/06 06:33:57 - mmengine - INFO - Epoch(train)  [3][ 400/1563]  lr: 1.0000e-03  eta: 0:10:11  time: 0.0499  data_time: 0.0003  memory: 1025  loss: 0.3206
2023/02/06 06:34:02 - mmengine - INFO - Epoch(train)  [3][ 500/1563]  lr: 1.0000e-03  eta: 0:10:06  time: 0.0500  data_time: 0.0003  memory: 1025  loss: 0.3730
2023/02/06 06:34:07 - mmengine - INFO - Epoch(train)  [3][ 600/1563]  lr: 1.0000e-03  eta: 0:10:01  time: 0.0502  data_time: 0.0003  memory: 1025  loss: 0.3335
2023/02/06 06:34:12 - mmengine - INFO - Epoch(train)  [3][ 700/1563]  lr: 1.0000e-03  eta: 0:09:55  time: 0.0503  data_time: 0.0003  memory: 1025  loss: 0.3342
2023/02/06 06:34:17 - mmengine - INFO - Epoch(train)  [3][ 800/1563]  lr: 1.0000e-03  eta: 0:09:50  time: 0.0502  data_time: 0.0003  memory: 1025  loss: 0.4111
2023/02/06 06:34:20 - mmengine - INFO - Exp name: resnet50_8xb32_in1k_20230206_063033
2023/02/06 06:34:22 - mmengine - INFO - Epoch(train)  [3][ 900/1563]  lr: 1.0000e-03  eta: 0:09:45  time: 0.0501  data_time: 0.0002  memory: 1025  loss: 0.3720
2023/02/06 06:34:27 - mmengine - INFO - Epoch(train)  [3][1000/1563]  lr: 1.0000e-03  eta: 0:09:40  time: 0.0503  data_time: 0.0003  memory: 1025  loss: 0.3411
2023/02/06 06:34:32 - mmengine - INFO - Epoch(train)  [3][1100/1563]  lr: 1.0000e-03  eta: 0:09:35  time: 0.0499  data_time: 0.0003  memory: 1025  loss: 0.3397
2023/02/06 06:34:37 - mmengine - INFO - Epoch(train)  [3][1200/1563]  lr: 1.0000e-03  eta: 0:09:30  time: 0.0502  data_time: 0.0003  memory: 1025  loss: 0.3779
2023/02/06 06:34:42 - mmengine - INFO - Epoch(train)  [3][1300/1563]  lr: 1.0000e-03  eta: 0:09:25  time: 0.0503  data_time: 0.0003  memory: 1025  loss: 0.3465
2023/02/06 06:34:47 - mmengine - INFO - Epoch(train)  [3][1400/1563]  lr: 1.0000e-03  eta: 0:09:20  time: 0.0499  data_time: 0.0003  memory: 1025  loss: 0.3987
2023/02/06 06:34:52 - mmengine - INFO - Epoch(train)  [3][1500/1563]  lr: 1.0000e-03  eta: 0:09:14  time: 0.0500  data_time: 0.0003  memory: 1025  loss: 0.3529
2023/02/06 06:34:55 - mmengine - INFO - Exp name: resnet50_8xb32_in1k_20230206_063033
2023/02/06 06:34:55 - mmengine - INFO - Saving checkpoint at 3 epochs
2023/02/06 06:34:58 - mmengine - INFO - Epoch(val)  [3][100/313]    eta: 0:00:06  time: 0.0330  data_time: 0.0002  memory: 1025  
2023/02/06 06:35:01 - mmengine - INFO - Epoch(val)  [3][200/313]    eta: 0:00:03  time: 0.0282  data_time: 0.0002  memory: 600  
2023/02/06 06:35:04 - mmengine - INFO - Epoch(val)  [3][300/313]    eta: 0:00:00  time: 0.0283  data_time: 0.0002  memory: 600  
2023/02/06 06:35:05 - mmengine - INFO - Epoch(val) [3][313/313]  accuracy/top1: 86.0800  accuracy/top5: 99.4300
2023/02/06 06:35:10 - mmengine - INFO - Epoch(train)  [4][ 100/1563]  lr: 1.0000e-03  eta: 0:09:06  time: 0.0498  data_time: 0.0002  memory: 1025  loss: 0.2920
2023/02/06 06:35:15 - mmengine - INFO - Epoch(train)  [4][ 200/1563]  lr: 1.0000e-03  eta: 0:09:01  time: 0.0506  data_time: 0.0002  memory: 1025  loss: 0.3735
2023/02/06 06:35:20 - mmengine - INFO - Epoch(train)  [4][ 300/1563]  lr: 1.0000e-03  eta: 0:08:56  time: 0.0506  data_time: 0.0003  memory: 1025  loss: 0.3355
2023/02/06 06:35:20 - mmengine - INFO - Exp name: resnet50_8xb32_in1k_20230206_063033
2023/02/06 06:35:25 - mmengine - INFO - Epoch(train)  [4][ 400/1563]  lr: 1.0000e-03  eta: 0:08:51  time: 0.0504  data_time: 0.0002  memory: 1025  loss: 0.3164
2023/02/06 06:35:30 - mmengine - INFO - Epoch(train)  [4][ 500/1563]  lr: 1.0000e-03  eta: 0:08:46  time: 0.0499  data_time: 0.0003  memory: 1025  loss: 0.2562
2023/02/06 06:35:35 - mmengine - INFO - Epoch(train)  [4][ 600/1563]  lr: 1.0000e-03  eta: 0:08:41  time: 0.0499  data_time: 0.0003  memory: 1025  loss: 0.2769
2023/02/06 06:35:40 - mmengine - INFO - Epoch(train)  [4][ 700/1563]  lr: 1.0000e-03  eta: 0:08:36  time: 0.0501  data_time: 0.0003  memory: 1025  loss: 0.3051
2023/02/06 06:35:45 - mmengine - INFO - Epoch(train)  [4][ 800/1563]  lr: 1.0000e-03  eta: 0:08:31  time: 0.0507  data_time: 0.0003  memory: 1025  loss: 0.2910
2023/02/06 06:35:50 - mmengine - INFO - Epoch(train)  [4][ 900/1563]  lr: 1.0000e-03  eta: 0:08:26  time: 0.0506  data_time: 0.0003  memory: 1025  loss: 0.3443
2023/02/06 06:35:55 - mmengine - INFO - Epoch(train)  [4][1000/1563]  lr: 1.0000e-03  eta: 0:08:20  time: 0.0490  data_time: 0.0003  memory: 1025  loss: 0.3050
2023/02/06 06:36:00 - mmengine - INFO - Epoch(train)  [4][1100/1563]  lr: 1.0000e-03  eta: 0:08:15  time: 0.0498  data_time: 0.0003  memory: 1025  loss: 0.2593
2023/02/06 06:36:05 - mmengine - INFO - Epoch(train)  [4][1200/1563]  lr: 1.0000e-03  eta: 0:08:10  time: 0.0498  data_time: 0.0003  memory: 1025  loss: 0.3353
2023/02/06 06:36:10 - mmengine - INFO - Epoch(train)  [4][1300/1563]  lr: 1.0000e-03  eta: 0:08:05  time: 0.0504  data_time: 0.0003  memory: 1025  loss: 0.2961
2023/02/06 06:36:10 - mmengine - INFO - Exp name: resnet50_8xb32_in1k_20230206_063033
2023/02/06 06:36:15 - mmengine - INFO - Epoch(train)  [4][1400/1563]  lr: 1.0000e-03  eta: 0:08:00  time: 0.0499  data_time: 0.0002  memory: 1025  loss: 0.2921
2023/02/06 06:36:20 - mmengine - INFO - Epoch(train)  [4][1500/1563]  lr: 1.0000e-03  eta: 0:07:55  time: 0.0506  data_time: 0.0003  memory: 1025  loss: 0.4370
2023/02/06 06:36:23 - mmengine - INFO - Exp name: resnet50_8xb32_in1k_20230206_063033
2023/02/06 06:36:23 - mmengine - INFO - Saving checkpoint at 4 epochs
2023/02/06 06:36:27 - mmengine - INFO - Epoch(val)  [4][100/313]    eta: 0:00:06  time: 0.0286  data_time: 0.0002  memory: 1025  
2023/02/06 06:36:30 - mmengine - INFO - Epoch(val)  [4][200/313]    eta: 0:00:03  time: 0.0288  data_time: 0.0002  memory: 600  
2023/02/06 06:36:32 - mmengine - INFO - Epoch(val)  [4][300/313]    eta: 0:00:00  time: 0.0283  data_time: 0.0002  memory: 600  
2023/02/06 06:36:33 - mmengine - INFO - Epoch(val) [4][313/313]  accuracy/top1: 83.7900  accuracy/top5: 99.2100
2023/02/06 06:36:38 - mmengine - INFO - Epoch(train)  [5][ 100/1563]  lr: 1.0000e-03  eta: 0:07:47  time: 0.0504  data_time: 0.0003  memory: 1025  loss: 0.2551
2023/02/06 06:36:43 - mmengine - INFO - Epoch(train)  [5][ 200/1563]  lr: 1.0000e-03  eta: 0:07:42  time: 0.0498  data_time: 0.0002  memory: 1025  loss: 0.2140
2023/02/06 06:36:48 - mmengine - INFO - Epoch(train)  [5][ 300/1563]  lr: 1.0000e-03  eta: 0:07:37  time: 0.0504  data_time: 0.0003  memory: 1025  loss: 0.2557
2023/02/06 06:36:53 - mmengine - INFO - Epoch(train)  [5][ 400/1563]  lr: 1.0000e-03  eta: 0:07:32  time: 0.0501  data_time: 0.0002  memory: 1025  loss: 0.2693
2023/02/06 06:36:58 - mmengine - INFO - Epoch(train)  [5][ 500/1563]  lr: 1.0000e-03  eta: 0:07:27  time: 0.0503  data_time: 0.0002  memory: 1025  loss: 0.2974
2023/02/06 06:37:03 - mmengine - INFO - Epoch(train)  [5][ 600/1563]  lr: 1.0000e-03  eta: 0:07:22  time: 0.0503  data_time: 0.0003  memory: 1025  loss: 0.2450
2023/02/06 06:37:08 - mmengine - INFO - Epoch(train)  [5][ 700/1563]  lr: 1.0000e-03  eta: 0:07:17  time: 0.0504  data_time: 0.0002  memory: 1025  loss: 0.2378
2023/02/06 06:37:11 - mmengine - INFO - Exp name: resnet50_8xb32_in1k_20230206_063033
2023/02/06 06:37:13 - mmengine - INFO - Epoch(train)  [5][ 800/1563]  lr: 1.0000e-03  eta: 0:07:12  time: 0.0504  data_time: 0.0002  memory: 1025  loss: 0.2380
2023/02/06 06:37:18 - mmengine - INFO - Epoch(train)  [5][ 900/1563]  lr: 1.0000e-03  eta: 0:07:07  time: 0.0501  data_time: 0.0002  memory: 1025  loss: 0.2494
2023/02/06 06:37:23 - mmengine - INFO - Epoch(train)  [5][1000/1563]  lr: 1.0000e-03  eta: 0:07:02  time: 0.0506  data_time: 0.0002  memory: 1025  loss: 0.2190
2023/02/06 06:37:28 - mmengine - INFO - Epoch(train)  [5][1100/1563]  lr: 1.0000e-03  eta: 0:06:56  time: 0.0500  data_time: 0.0002  memory: 1025  loss: 0.2802
2023/02/06 06:37:33 - mmengine - INFO - Epoch(train)  [5][1200/1563]  lr: 1.0000e-03  eta: 0:06:51  time: 0.0504  data_time: 0.0002  memory: 1025  loss: 0.2926
2023/02/06 06:37:38 - mmengine - INFO - Epoch(train)  [5][1300/1563]  lr: 1.0000e-03  eta: 0:06:46  time: 0.0499  data_time: 0.0002  memory: 1025  loss: 0.1768
2023/02/06 06:37:43 - mmengine - INFO - Epoch(train)  [5][1400/1563]  lr: 1.0000e-03  eta: 0:06:41  time: 0.0502  data_time: 0.0002  memory: 1025  loss: 0.2319
2023/02/06 06:37:48 - mmengine - INFO - Epoch(train)  [5][1500/1563]  lr: 1.0000e-03  eta: 0:06:36  time: 0.0497  data_time: 0.0002  memory: 1025  loss: 0.2095
2023/02/06 06:37:51 - mmengine - INFO - Exp name: resnet50_8xb32_in1k_20230206_063033
2023/02/06 06:37:51 - mmengine - INFO - Saving checkpoint at 5 epochs
2023/02/06 06:37:55 - mmengine - INFO - Epoch(val)  [5][100/313]    eta: 0:00:06  time: 0.0276  data_time: 0.0001  memory: 1025  
2023/02/06 06:37:58 - mmengine - INFO - Epoch(val)  [5][200/313]    eta: 0:00:03  time: 0.0285  data_time: 0.0002  memory: 600  
2023/02/06 06:38:01 - mmengine - INFO - Epoch(val)  [5][300/313]    eta: 0:00:00  time: 0.0283  data_time: 0.0002  memory: 600  
2023/02/06 06:38:01 - mmengine - INFO - Epoch(val) [5][313/313]  accuracy/top1: 88.3600  accuracy/top5: 99.5100
2023/02/06 06:38:06 - mmengine - INFO - Epoch(train)  [6][ 100/1563]  lr: 1.0000e-03  eta: 0:06:28  time: 0.0505  data_time: 0.0003  memory: 1025  loss: 0.1912
2023/02/06 06:38:10 - mmengine - INFO - Exp name: resnet50_8xb32_in1k_20230206_063033
2023/02/06 06:38:11 - mmengine - INFO - Epoch(train)  [6][ 200/1563]  lr: 1.0000e-03  eta: 0:06:23  time: 0.0499  data_time: 0.0002  memory: 1025  loss: 0.1920
2023/02/06 06:38:16 - mmengine - INFO - Epoch(train)  [6][ 300/1563]  lr: 1.0000e-03  eta: 0:06:18  time: 0.0497  data_time: 0.0003  memory: 1025  loss: 0.2220
2023/02/06 06:38:21 - mmengine - INFO - Epoch(train)  [6][ 400/1563]  lr: 1.0000e-03  eta: 0:06:13  time: 0.0503  data_time: 0.0003  memory: 1025  loss: 0.2753
2023/02/06 06:38:26 - mmengine - INFO - Epoch(train)  [6][ 500/1563]  lr: 1.0000e-03  eta: 0:06:08  time: 0.0498  data_time: 0.0003  memory: 1025  loss: 0.2072
2023/02/06 06:38:31 - mmengine - INFO - Epoch(train)  [6][ 600/1563]  lr: 1.0000e-03  eta: 0:06:03  time: 0.0507  data_time: 0.0003  memory: 1025  loss: 0.1960
2023/02/06 06:38:36 - mmengine - INFO - Epoch(train)  [6][ 700/1563]  lr: 1.0000e-03  eta: 0:05:58  time: 0.0501  data_time: 0.0003  memory: 1025  loss: 0.2300
2023/02/06 06:38:41 - mmengine - INFO - Epoch(train)  [6][ 800/1563]  lr: 1.0000e-03  eta: 0:05:53  time: 0.0500  data_time: 0.0002  memory: 1025  loss: 0.2303
2023/02/06 06:38:46 - mmengine - INFO - Epoch(train)  [6][ 900/1563]  lr: 1.0000e-03  eta: 0:05:47  time: 0.0499  data_time: 0.0003  memory: 1025  loss: 0.2217
2023/02/06 06:38:51 - mmengine - INFO - Epoch(train)  [6][1000/1563]  lr: 1.0000e-03  eta: 0:05:42  time: 0.0495  data_time: 0.0003  memory: 1025  loss: 0.2363
2023/02/06 06:38:56 - mmengine - INFO - Epoch(train)  [6][1100/1563]  lr: 1.0000e-03  eta: 0:05:37  time: 0.0495  data_time: 0.0003  memory: 1025  loss: 0.2143
2023/02/06 06:39:00 - mmengine - INFO - Exp name: resnet50_8xb32_in1k_20230206_063033
2023/02/06 06:39:01 - mmengine - INFO - Epoch(train)  [6][1200/1563]  lr: 1.0000e-03  eta: 0:05:32  time: 0.0500  data_time: 0.0003  memory: 1025  loss: 0.2000
2023/02/06 06:39:06 - mmengine - INFO - Epoch(train)  [6][1300/1563]  lr: 1.0000e-03  eta: 0:05:27  time: 0.0497  data_time: 0.0003  memory: 1025  loss: 0.2338
2023/02/06 06:39:11 - mmengine - INFO - Epoch(train)  [6][1400/1563]  lr: 1.0000e-03  eta: 0:05:22  time: 0.0497  data_time: 0.0003  memory: 1025  loss: 0.2718
2023/02/06 06:39:16 - mmengine - INFO - Epoch(train)  [6][1500/1563]  lr: 1.0000e-03  eta: 0:05:17  time: 0.0499  data_time: 0.0003  memory: 1025  loss: 0.2351
2023/02/06 06:39:19 - mmengine - INFO - Exp name: resnet50_8xb32_in1k_20230206_063033
2023/02/06 06:39:19 - mmengine - INFO - Saving checkpoint at 6 epochs
2023/02/06 06:39:23 - mmengine - INFO - Epoch(val)  [6][100/313]    eta: 0:00:06  time: 0.0278  data_time: 0.0001  memory: 1025  
2023/02/06 06:39:26 - mmengine - INFO - Epoch(val)  [6][200/313]    eta: 0:00:03  time: 0.0283  data_time: 0.0002  memory: 600  
2023/02/06 06:39:29 - mmengine - INFO - Epoch(val)  [6][300/313]    eta: 0:00:00  time: 0.0283  data_time: 0.0001  memory: 600  
2023/02/06 06:39:29 - mmengine - INFO - Epoch(val) [6][313/313]  accuracy/top1: 90.1800  accuracy/top5: 99.6700
2023/02/06 06:39:34 - mmengine - INFO - Epoch(train)  [7][ 100/1563]  lr: 1.0000e-03  eta: 0:05:09  time: 0.0499  data_time: 0.0003  memory: 1025  loss: 0.2174
2023/02/06 06:39:39 - mmengine - INFO - Epoch(train)  [7][ 200/1563]  lr: 1.0000e-03  eta: 0:05:04  time: 0.0496  data_time: 0.0003  memory: 1025  loss: 0.2059
2023/02/06 06:39:44 - mmengine - INFO - Epoch(train)  [7][ 300/1563]  lr: 1.0000e-03  eta: 0:04:59  time: 0.0492  data_time: 0.0003  memory: 1025  loss: 0.2027
2023/02/06 06:39:49 - mmengine - INFO - Epoch(train)  [7][ 400/1563]  lr: 1.0000e-03  eta: 0:04:54  time: 0.0499  data_time: 0.0003  memory: 1025  loss: 0.1192
2023/02/06 06:39:54 - mmengine - INFO - Epoch(train)  [7][ 500/1563]  lr: 1.0000e-03  eta: 0:04:49  time: 0.0501  data_time: 0.0002  memory: 1025  loss: 0.1907
2023/02/06 06:39:59 - mmengine - INFO - Epoch(train)  [7][ 600/1563]  lr: 1.0000e-03  eta: 0:04:44  time: 0.0499  data_time: 0.0003  memory: 1025  loss: 0.2153
2023/02/06 06:40:00 - mmengine - INFO - Exp name: resnet50_8xb32_in1k_20230206_063033
2023/02/06 06:40:04 - mmengine - INFO - Epoch(train)  [7][ 700/1563]  lr: 1.0000e-03  eta: 0:04:39  time: 0.0489  data_time: 0.0002  memory: 1025  loss: 0.1646
2023/02/06 06:40:09 - mmengine - INFO - Epoch(train)  [7][ 800/1563]  lr: 1.0000e-03  eta: 0:04:34  time: 0.0498  data_time: 0.0003  memory: 1025  loss: 0.1219
2023/02/06 06:40:14 - mmengine - INFO - Epoch(train)  [7][ 900/1563]  lr: 1.0000e-03  eta: 0:04:29  time: 0.0504  data_time: 0.0003  memory: 1025  loss: 0.1537
2023/02/06 06:40:19 - mmengine - INFO - Epoch(train)  [7][1000/1563]  lr: 1.0000e-03  eta: 0:04:23  time: 0.0498  data_time: 0.0003  memory: 1025  loss: 0.2315
2023/02/06 06:40:24 - mmengine - INFO - Epoch(train)  [7][1100/1563]  lr: 1.0000e-03  eta: 0:04:18  time: 0.0496  data_time: 0.0003  memory: 1025  loss: 0.2299
2023/02/06 06:40:29 - mmengine - INFO - Epoch(train)  [7][1200/1563]  lr: 1.0000e-03  eta: 0:04:13  time: 0.0497  data_time: 0.0003  memory: 1025  loss: 0.2253
2023/02/06 06:40:34 - mmengine - INFO - Epoch(train)  [7][1300/1563]  lr: 1.0000e-03  eta: 0:04:08  time: 0.0496  data_time: 0.0003  memory: 1025  loss: 0.2052
2023/02/06 06:40:39 - mmengine - INFO - Epoch(train)  [7][1400/1563]  lr: 1.0000e-03  eta: 0:04:03  time: 0.0500  data_time: 0.0003  memory: 1025  loss: 0.2101
2023/02/06 06:40:44 - mmengine - INFO - Epoch(train)  [7][1500/1563]  lr: 1.0000e-03  eta: 0:03:58  time: 0.0499  data_time: 0.0003  memory: 1025  loss: 0.2331
2023/02/06 06:40:47 - mmengine - INFO - Exp name: resnet50_8xb32_in1k_20230206_063033
2023/02/06 06:40:47 - mmengine - INFO - Saving checkpoint at 7 epochs
2023/02/06 06:40:50 - mmengine - INFO - Epoch(val)  [7][100/313]    eta: 0:00:06  time: 0.0281  data_time: 0.0002  memory: 1025  
2023/02/06 06:40:53 - mmengine - INFO - Epoch(val)  [7][200/313]    eta: 0:00:03  time: 0.0287  data_time: 0.0002  memory: 600  
2023/02/06 06:40:56 - mmengine - INFO - Epoch(val)  [7][300/313]    eta: 0:00:00  time: 0.0284  data_time: 0.0002  memory: 600  
2023/02/06 06:40:56 - mmengine - INFO - Epoch(val) [7][313/313]  accuracy/top1: 88.7600  accuracy/top5: 99.4900
2023/02/06 06:40:59 - mmengine - INFO - Exp name: resnet50_8xb32_in1k_20230206_063033
2023/02/06 06:41:01 - mmengine - INFO - Epoch(train)  [8][ 100/1563]  lr: 1.0000e-03  eta: 0:03:50  time: 0.0500  data_time: 0.0003  memory: 1025  loss: 0.1365
2023/02/06 06:41:06 - mmengine - INFO - Epoch(train)  [8][ 200/1563]  lr: 1.0000e-03  eta: 0:03:45  time: 0.0490  data_time: 0.0003  memory: 1025  loss: 0.1976
2023/02/06 06:41:11 - mmengine - INFO - Epoch(train)  [8][ 300/1563]  lr: 1.0000e-03  eta: 0:03:40  time: 0.0501  data_time: 0.0003  memory: 1025  loss: 0.1529
2023/02/06 06:41:16 - mmengine - INFO - Epoch(train)  [8][ 400/1563]  lr: 1.0000e-03  eta: 0:03:35  time: 0.0496  data_time: 0.0003  memory: 1025  loss: 0.1605
2023/02/06 06:41:21 - mmengine - INFO - Epoch(train)  [8][ 500/1563]  lr: 1.0000e-03  eta: 0:03:30  time: 0.0501  data_time: 0.0003  memory: 1025  loss: 0.1609
2023/02/06 06:41:26 - mmengine - INFO - Epoch(train)  [8][ 600/1563]  lr: 1.0000e-03  eta: 0:03:25  time: 0.0502  data_time: 0.0003  memory: 1025  loss: 0.1810
2023/02/06 06:41:31 - mmengine - INFO - Epoch(train)  [8][ 700/1563]  lr: 1.0000e-03  eta: 0:03:20  time: 0.0502  data_time: 0.0003  memory: 1025  loss: 0.1835
2023/02/06 06:41:37 - mmengine - INFO - Epoch(train)  [8][ 800/1563]  lr: 1.0000e-03  eta: 0:03:15  time: 0.0496  data_time: 0.0003  memory: 1025  loss: 0.1234
2023/02/06 06:41:42 - mmengine - INFO - Epoch(train)  [8][ 900/1563]  lr: 1.0000e-03  eta: 0:03:10  time: 0.0498  data_time: 0.0002  memory: 1025  loss: 0.1590
2023/02/06 06:41:47 - mmengine - INFO - Epoch(train)  [8][1000/1563]  lr: 1.0000e-03  eta: 0:03:05  time: 0.0501  data_time: 0.0003  memory: 1025  loss: 0.1976
2023/02/06 06:41:50 - mmengine - INFO - Exp name: resnet50_8xb32_in1k_20230206_063033
2023/02/06 06:41:52 - mmengine - INFO - Epoch(train)  [8][1100/1563]  lr: 1.0000e-03  eta: 0:03:00  time: 0.0501  data_time: 0.0003  memory: 1025  loss: 0.1547
2023/02/06 06:41:57 - mmengine - INFO - Epoch(train)  [8][1200/1563]  lr: 1.0000e-03  eta: 0:02:55  time: 0.0490  data_time: 0.0003  memory: 1025  loss: 0.1810
2023/02/06 06:42:02 - mmengine - INFO - Epoch(train)  [8][1300/1563]  lr: 1.0000e-03  eta: 0:02:50  time: 0.0498  data_time: 0.0003  memory: 1025  loss: 0.2160
2023/02/06 06:42:07 - mmengine - INFO - Epoch(train)  [8][1400/1563]  lr: 1.0000e-03  eta: 0:02:45  time: 0.0500  data_time: 0.0003  memory: 1025  loss: 0.1535
2023/02/06 06:42:12 - mmengine - INFO - Epoch(train)  [8][1500/1563]  lr: 1.0000e-03  eta: 0:02:40  time: 0.0503  data_time: 0.0003  memory: 1025  loss: 0.1916
2023/02/06 06:42:15 - mmengine - INFO - Exp name: resnet50_8xb32_in1k_20230206_063033
2023/02/06 06:42:15 - mmengine - INFO - Saving checkpoint at 8 epochs
2023/02/06 06:42:18 - mmengine - INFO - Epoch(val)  [8][100/313]    eta: 0:00:06  time: 0.0289  data_time: 0.0002  memory: 1025  
2023/02/06 06:42:21 - mmengine - INFO - Epoch(val)  [8][200/313]    eta: 0:00:03  time: 0.0279  data_time: 0.0002  memory: 600  
2023/02/06 06:42:24 - mmengine - INFO - Epoch(val)  [8][300/313]    eta: 0:00:00  time: 0.0292  data_time: 0.0001  memory: 600  
2023/02/06 06:42:24 - mmengine - INFO - Epoch(val) [8][313/313]  accuracy/top1: 89.4800  accuracy/top5: 99.6000
2023/02/06 06:42:29 - mmengine - INFO - Epoch(train)  [9][ 100/1563]  lr: 1.0000e-03  eta: 0:02:31  time: 0.0501  data_time: 0.0003  memory: 1025  loss: 0.1586
2023/02/06 06:42:34 - mmengine - INFO - Epoch(train)  [9][ 200/1563]  lr: 1.0000e-03  eta: 0:02:26  time: 0.0499  data_time: 0.0003  memory: 1025  loss: 0.1153
2023/02/06 06:42:39 - mmengine - INFO - Epoch(train)  [9][ 300/1563]  lr: 1.0000e-03  eta: 0:02:21  time: 0.0500  data_time: 0.0002  memory: 1025  loss: 0.1454
2023/02/06 06:42:44 - mmengine - INFO - Epoch(train)  [9][ 400/1563]  lr: 1.0000e-03  eta: 0:02:16  time: 0.0503  data_time: 0.0003  memory: 1025  loss: 0.1587
2023/02/06 06:42:49 - mmengine - INFO - Exp name: resnet50_8xb32_in1k_20230206_063033
2023/02/06 06:42:50 - mmengine - INFO - Epoch(train)  [9][ 500/1563]  lr: 1.0000e-03  eta: 0:02:11  time: 0.0504  data_time: 0.0003  memory: 1025  loss: 0.1330
2023/02/06 06:42:55 - mmengine - INFO - Epoch(train)  [9][ 600/1563]  lr: 1.0000e-03  eta: 0:02:06  time: 0.0505  data_time: 0.0003  memory: 1025  loss: 0.1305
2023/02/06 06:43:00 - mmengine - INFO - Epoch(train)  [9][ 700/1563]  lr: 1.0000e-03  eta: 0:02:01  time: 0.0504  data_time: 0.0003  memory: 1025  loss: 0.1558
2023/02/06 06:43:05 - mmengine - INFO - Epoch(train)  [9][ 800/1563]  lr: 1.0000e-03  eta: 0:01:56  time: 0.0501  data_time: 0.0003  memory: 1025  loss: 0.1368
2023/02/06 06:43:10 - mmengine - INFO - Epoch(train)  [9][ 900/1563]  lr: 1.0000e-03  eta: 0:01:51  time: 0.0503  data_time: 0.0003  memory: 1025  loss: 0.1487
2023/02/06 06:43:15 - mmengine - INFO - Epoch(train)  [9][1000/1563]  lr: 1.0000e-03  eta: 0:01:46  time: 0.0505  data_time: 0.0003  memory: 1025  loss: 0.1402
2023/02/06 06:43:20 - mmengine - INFO - Epoch(train)  [9][1100/1563]  lr: 1.0000e-03  eta: 0:01:41  time: 0.0507  data_time: 0.0003  memory: 1025  loss: 0.1839
2023/02/06 06:43:25 - mmengine - INFO - Epoch(train)  [9][1200/1563]  lr: 1.0000e-03  eta: 0:01:36  time: 0.0497  data_time: 0.0003  memory: 1025  loss: 0.1338
2023/02/06 06:43:30 - mmengine - INFO - Epoch(train)  [9][1300/1563]  lr: 1.0000e-03  eta: 0:01:31  time: 0.0503  data_time: 0.0003  memory: 1025  loss: 0.1448
2023/02/06 06:43:35 - mmengine - INFO - Epoch(train)  [9][1400/1563]  lr: 1.0000e-03  eta: 0:01:26  time: 0.0503  data_time: 0.0003  memory: 1025  loss: 0.1575
2023/02/06 06:43:40 - mmengine - INFO - Exp name: resnet50_8xb32_in1k_20230206_063033
2023/02/06 06:43:40 - mmengine - INFO - Epoch(train)  [9][1500/1563]  lr: 1.0000e-03  eta: 0:01:21  time: 0.0503  data_time: 0.0003  memory: 1025  loss: 0.1415
2023/02/06 06:43:43 - mmengine - INFO - Exp name: resnet50_8xb32_in1k_20230206_063033
2023/02/06 06:43:43 - mmengine - INFO - Saving checkpoint at 9 epochs
2023/02/06 06:43:46 - mmengine - INFO - Epoch(val)  [9][100/313]    eta: 0:00:06  time: 0.0296  data_time: 0.0002  memory: 1025  
2023/02/06 06:43:49 - mmengine - INFO - Epoch(val)  [9][200/313]    eta: 0:00:03  time: 0.0288  data_time: 0.0002  memory: 600  
2023/02/06 06:43:52 - mmengine - INFO - Epoch(val)  [9][300/313]    eta: 0:00:00  time: 0.0294  data_time: 0.0002  memory: 600  
2023/02/06 06:43:53 - mmengine - INFO - Epoch(val) [9][313/313]  accuracy/top1: 90.5400  accuracy/top5: 99.6700
2023/02/06 06:43:58 - mmengine - INFO - Epoch(train) [10][ 100/1563]  lr: 1.0000e-03  eta: 0:01:13  time: 0.0503  data_time: 0.0003  memory: 1025  loss: 0.1028
2023/02/06 06:44:03 - mmengine - INFO - Epoch(train) [10][ 200/1563]  lr: 1.0000e-03  eta: 0:01:08  time: 0.0498  data_time: 0.0003  memory: 1025  loss: 0.1120
2023/02/06 06:44:08 - mmengine - INFO - Epoch(train) [10][ 300/1563]  lr: 1.0000e-03  eta: 0:01:03  time: 0.0502  data_time: 0.0003  memory: 1025  loss: 0.0884
2023/02/06 06:44:13 - mmengine - INFO - Epoch(train) [10][ 400/1563]  lr: 1.0000e-03  eta: 0:00:58  time: 0.0503  data_time: 0.0003  memory: 1025  loss: 0.0778
2023/02/06 06:44:18 - mmengine - INFO - Epoch(train) [10][ 500/1563]  lr: 1.0000e-03  eta: 0:00:53  time: 0.0504  data_time: 0.0003  memory: 1025  loss: 0.1021
2023/02/06 06:44:23 - mmengine - INFO - Epoch(train) [10][ 600/1563]  lr: 1.0000e-03  eta: 0:00:48  time: 0.0499  data_time: 0.0003  memory: 1025  loss: 0.1241
2023/02/06 06:44:28 - mmengine - INFO - Epoch(train) [10][ 700/1563]  lr: 1.0000e-03  eta: 0:00:43  time: 0.0504  data_time: 0.0003  memory: 1025  loss: 0.1149
2023/02/06 06:44:33 - mmengine - INFO - Epoch(train) [10][ 800/1563]  lr: 1.0000e-03  eta: 0:00:38  time: 0.0491  data_time: 0.0003  memory: 1025  loss: 0.1065
2023/02/06 06:44:38 - mmengine - INFO - Epoch(train) [10][ 900/1563]  lr: 1.0000e-03  eta: 0:00:33  time: 0.0497  data_time: 0.0003  memory: 1025  loss: 0.1064
2023/02/06 06:44:39 - mmengine - INFO - Exp name: resnet50_8xb32_in1k_20230206_063033
2023/02/06 06:44:43 - mmengine - INFO - Epoch(train) [10][1000/1563]  lr: 1.0000e-03  eta: 0:00:28  time: 0.0498  data_time: 0.0003  memory: 1025  loss: 0.1712
2023/02/06 06:44:48 - mmengine - INFO - Epoch(train) [10][1100/1563]  lr: 1.0000e-03  eta: 0:00:23  time: 0.0499  data_time: 0.0003  memory: 1025  loss: 0.1575
2023/02/06 06:44:53 - mmengine - INFO - Epoch(train) [10][1200/1563]  lr: 1.0000e-03  eta: 0:00:18  time: 0.0496  data_time: 0.0003  memory: 1025  loss: 0.1096
2023/02/06 06:44:58 - mmengine - INFO - Epoch(train) [10][1300/1563]  lr: 1.0000e-03  eta: 0:00:13  time: 0.0495  data_time: 0.0003  memory: 1025  loss: 0.0904
2023/02/06 06:45:03 - mmengine - INFO - Epoch(train) [10][1400/1563]  lr: 1.0000e-03  eta: 0:00:08  time: 0.0496  data_time: 0.0003  memory: 1025  loss: 0.1402
2023/02/06 06:45:08 - mmengine - INFO - Epoch(train) [10][1500/1563]  lr: 1.0000e-03  eta: 0:00:03  time: 0.0493  data_time: 0.0003  memory: 1025  loss: 0.1279
2023/02/06 06:45:11 - mmengine - INFO - Exp name: resnet50_8xb32_in1k_20230206_063033
2023/02/06 06:45:11 - mmengine - INFO - Saving checkpoint at 10 epochs
2023/02/06 06:45:14 - mmengine - INFO - Epoch(val) [10][100/313]    eta: 0:00:06  time: 0.0282  data_time: 0.0002  memory: 1025  
2023/02/06 06:45:17 - mmengine - INFO - Epoch(val) [10][200/313]    eta: 0:00:03  time: 0.0285  data_time: 0.0002  memory: 600  
2023/02/06 06:45:20 - mmengine - INFO - Epoch(val) [10][300/313]    eta: 0:00:00  time: 0.0274  data_time: 0.0003  memory: 600  
2023/02/06 06:45:20 - mmengine - INFO - Epoch(val) [10][313/313]  accuracy/top1: 90.6300  accuracy/top5: 99.7000
